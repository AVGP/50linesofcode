<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>50 Lines of Code</title>
    <link>https://50linesofco.de/</link>
    <description>The /var/log of Martin Naumann</description>
    <language>en-us</language>
    <pubDate>Mon, 04 Jul 2016 12:43:23 GMT</pubDate>
    <item>
	<title>JSON RPC 2.0 - for simple and powerful APIs</title>
	<link>https://50linesofco.de/2016-03-09-json-rpc-2-for-simple-and-powerful-apis.html</link>
	<description>To my surprise a contender in the field of API protocols is yet unknown: JSON-RPC 2.0.
A standard since 2010, it is simple yet powerful but barely known amongst developers.
This article explains what it is, what makes it different and nice to work with and how to use it.</description>
	<guid isPermaLink="true">https://50linesofco.de/2016-03-09-json-rpc-2-for-simple-and-powerful-apis.html</guid>
</item>
<item>
	<title>Five rules to stay levelheaded and efficient when handling downtimes</title>
	<link>https://50linesofco.de/2016-03-17-five-rules-to-stay-levelheaded-and-efficient-when-handling-downtimes.html</link>
	<description>Downtimes, Crashes, Incidents, System Failures - they have many names, but most people involved with technology to some degree have experienced at least one at some point in their career.

I've seen many different teams and many different incarnations of the above-mentioned situations. I've been on the different sides of them: The user, the developer, the system administrator, the site reliability engineer and the consultant.

Some of them I have caused, some of them I helped to resolve and in some of them I was a mere bystander.

This post is the distilled essence on how different teams that I had the pleasure of being a member, dealt and deal with the stress and the specific characteristics of these tense situations to ensure timely and proper resolution.</description>
	<guid isPermaLink="true">https://50linesofco.de/2016-03-17-five-rules-to-stay-levelheaded-and-efficient-when-handling-downtimes.html</guid>
</item>
<item>
	<title>Five rules to stay sane and efficient when handling downtimes</title>
	<link>https://50linesofco.de/2016-03-17-five-rules-to-stay-sane-and-efficient-when-handling-downtimes.html</link>
	<description>Downtimes, Crashes, Incidents, System Failures - they have many names, but most people involved with technology to some degree have experienced at least one at some point in their career.

I've seen many different teams and many different incarnations of the above-mentioned situations. I've been on the different sides of them: The user, the developer, the system administrator, the site reliability engineer and the consultant.

Some of them I have caused, some of them I helped to resolve and in some of them I was a mere bystander.

This post is the distilled essence on how different teams that I had the pleasure of being a member, dealt and deal with the stress and the specific characteristics of these tense situations to ensure timely and proper resolution.</description>
	<guid isPermaLink="true">https://50linesofco.de/2016-03-17-five-rules-to-stay-sane-and-efficient-when-handling-downtimes.html</guid>
</item>
<item>
	<title>Slick and slf4j MDC logging in Scala</title>
	<link>https://50linesofco.de/2016-07-01-slick-and-slf4j-mdc-logging-in-scala.html</link>
	<description>* Multi-user applications need log messages to retain **context**, so the situation can be examined on a transaction-basis
* The **mapped diagnostic context**, short `MDC`, allows to put context to all log statements for a single thread
* Scala allows us to build an `ExecutionContext` where we can copy the `MDC` to any new thread that is being used giving us **multi-thread MDC logging**
* Slick requires us to also provide an `Executor` that uses this `ExecutionContext`
* There's a package for that: `de.geekonaut.slickmdc`</description>
	<guid isPermaLink="true">https://50linesofco.de/2016-07-01-slick-and-slf4j-mdc-logging-in-scala.html</guid>
</item>
<item>
	<title>The overwhelming web</title>
	<link>https://50linesofco.de/2016-07-04-the-overwhelming-web.html</link>
	<description>Web Development can be pretty strange these days.

On the one hand we tell beginners that they need ALL the things:
build tools, task runners, package managers, frameworks, polyfills, libraries, runtimes and
deployment systems.

On the other hand some are airing their concerns about some flavour of "fatigue",
be it a framework, library, JavaScript or even frontend fatigue.

I also noticed a sense of urgency for *everything*. Mobile-first, Offline-first, Accessibility-first, Content-first and the list goes on. It starts to feel like "everything-first", which of course really would mean: Nothing first.

Where are the olden days, where all you needed to build websites was a text editor and some space online to put it?</description>
	<guid isPermaLink="true">https://50linesofco.de/2016-07-04-the-overwhelming-web.html</guid>
</item>
  </channel>
</rss>
